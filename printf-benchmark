#!/bin/bash
# language startup time benchmark
# thanks Rosetta Code for a convenient Hello World listing
#
# For compiled languages, I'm measuring the speed the compiled executable runs.
#
# I'm taking the "real" field in bash's "time" output
# (Specifically, TIMEFORMAT="%3R")

# time the command and format the result
formatted_time () {
    TIMEFORMAT="%3R"
    language="$1"; shift 1
    tmp_time=$(mktemp)
    tmp_cmd_output=$(mktemp)

    # { time stuff }: output of stuff -> stdout, time -> stderr
    { time "$@"; } > "$tmp_cmd_output" 2> "$tmp_time"

    time_seconds=$(cat "$tmp_time")
    output=$(cat "$tmp_cmd_output")
    echo '{"status":"success",'\
          '"time":"'"$time_seconds"'",'\
          '"language":"'"$language"'",'\
          '"unit":"second"}'
}

error () {
    echo '{"status":"fail",'\
         '"message": "'"$*"'"}'
}

compile_run_and_time:go () {
    # $1: source file
    tmp=$(mktemp); tmp_out=$(mktemp)
    go tool compile -o "$tmp" "$1" && go tool link -o "$tmp_out" "$tmp"
    formatted_time "go (compiled)" "$tmp_out" # run it
    rm "$tmp" "$tmp_out"
}

compile_run_and_time:gcc () {
    # $1: source file
    tmp=$(mktemp --tmpdir tmp.XXXX.c) # *.c is required for c
    tmp_out=$(mktemp)
    cat "$1" > "$tmp"
    gcc -o "$tmp_out" "$tmp"
    formatted_time "gcc (compiled)" "$tmp_out" # run it
    rm "$tmp" "$tmp_out"
}

compile_run_and_time:vala () {
    # $1: source file
    tmp=$(mktemp --tmpdir tmp.XXXX.vala)
    tmp_out=$(mktemp)
    cat "$1" > "$tmp"
    valac -o "$tmp_out" "$tmp"
    formatted_time "vala (compiled)" "$tmp_out" # run it
    rm "$tmp" "$tmp_out"
}

compile_run_and_time:haskell () {
    # $1: source file
    tmp=$(mktemp --tmpdir tmp.XXXX.c) # *.c is required for c
    tmp_out=$(mktemp)
    # cat "$1" > "$tmp"
    # gcc -o "$tmp_out" "$tmp"
    # formatted_time "haskell (compiled)" "$tmp_out" # run it
    error "haskell has problem running currently... yeah."
    rm "$tmp" "$tmp_out"
}

# interpreted languages
formatted_time python python -c 'print("hello")'
formatted_time perl perl -e 'print("hello\n")'
formatted_time ruby ruby -e puts "hello"

formatted_time racket racket -e '(displayln "hello")'
formatted_time guile guile -c '(display "hello\n")'
formatted_time sbcl sbcl --noinform --non-interactive --eval '(format t "hello~%")'
formatted_time clisp clisp -q -x '(format t "hello~%")'
formatted_time "emacs lisp" emacs -batch -eval '(princ "hello\n")'

formatted_time node node --eval 'console.log("hello");'
formatted_time gjs gjs -c 'print("hello");'

compile_run_and_time:go /dev/fd/0 <<'GOLANG'
package main

import "fmt"

func main() {
    fmt.Println("hello")
}
GOLANG

compile_run_and_time:gcc /dev/fd/0 <<'C'
#include<stdio.h>

int main() {
    printf("hello\n");
    return 0;
}
C

compile_run_and_time:vala /dev/fd/0 <<'VALA'
void main() {
    stdout.printf("hello\n");
}
VALA

compile_run_and_time:haskell /dev/fd/0 <<'HASKELL'
main :: IO()
main = print "Hello"
HASKELL
