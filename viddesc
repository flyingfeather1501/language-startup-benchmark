#!/bin/bash

desc_reset () {
  yn=""
  desc_pv=false
  dft_name=""
  dft_feat=""
  dft_extra=""
  dft_pre=""
  separator="："
}

# Title
desc_ask_pv () {
  yn=""
  while :; do
    read -p "Is a PV made? (y/n) " yn
    case $yn in
      [Yy]* )
      desc_pv=true
      break
      ;;
      [Nn]* )
      desc_pv=false
      break
      ;;
      *) echo "Please input y/n"
    esac
  done
}

desc_ask_pretags () {
  yn=""
  desc_pre_tag=()
  i=0
  while :; do
    read -p "Is there more tags before name? (y/n) " yn
    case $yn in
      [Yy]* )
      read -p "Tag before name: " desc_pre_tag[$i]
      i=$((i+1))
      ;;
      [Nn]* )
      break
      ;;
      *) echo "Please input y/n"
    esac
  done
}

desc_ask_title () {
  read -p "Name: " dft_name
}

desc_ask_feat () {
  yn=""
  while :; do
    read -p "Is there a ft. field? (y/n) " yn
    case $yn in
      [Yy]* )
      read -p "Feat: " dft_feat
      break
      ;;
      [Nn]* )
      dft_feat=""
      ;;
      *) echo "Please input y/n"
    esac
  done
}

desc_ask_extratags () {
  yn=""
  desc_extra_tag=()
  i=0
  while :; do
    read -p "Is there more tags after name? (y/n) " yn
    case $yn in
      [Yy]* )
      read -p "Tag after name: " desc_extra_tag[$i]
      i=$((i+1))
      ;;
      [Nn]* )
      break
      ;;
      *) echo "Please input y/n"
    esac
  done
}

desc_print_title () {
  # pv
  if [[ $desc_pv == true ]]; then
    dft_pv=【PV】
  else
    dft_pv=""
  fi

  # repeat print extra tag for (its length) times.
  # this is needed for adding 【】 around each tag.
  for (( i = 0; i < "${#desc_extra_tag[@]}"; i++ )); do
    dft_extra=$dft_extra【${desc_extra_tag[i]}】
  done

  for (( i = 0; i < "${#desc_pre_tag[@]}"; i++ )); do
    dft_extra=$dft_pre【${desc_pre_tag[i]}】
  done

  echo $dft_pv $dft_pre $dft_name ft.$dft_feat $dft_extra
}

# Description

desc_ask_orig_credits () {
  yn=""
  credits_title=()
  credits_target=()
  i=0
  echo "Common original credits: Music, Video, Illust, etc."
  while :; do
    read -p "Is there more original credits to give? (y/n) " yn
    case $yn in
      [Yy]* )
      read -p "Credit title: " credits_title[$i]
      read -p "Credit target: " credits_target[$i]
      i=$((i+1))
      ;;
      [Nn]* )
      break
      ;;
      *) echo "Please input y/n"
    esac
  done
}

desc_ask_upload_comment () {
  while :; do
    read -p "Select a file to cat for upload comment, or (edit) for an editor: " upload_comment
    if [[ $upload_comment == edit ]]; then
      read -p "Edit using: " desc_editor
      tmp_comment_file=/tmp/viddesc-upload-comment-$(date +%s)
      $desc_editor $tmp_comment_file
      dfd_upload_comment=$(cat $tmp_comment_file)
      break
    elif ls $upload_comment > /dev/null; then
      dfd_upload_comment=$(cat $upload_comment)
      break
    else # upload_comment != edit && not a valid path
      echo file does not exist
    fi
  done
}

desc_ask_original_links () {
  echo write none to not include that
  read -p "Original Link (Youtube): " desc_orig_yt
  read -p "Original Link (niconico): " desc_orig_nico
}

desc_print_desc () {
  echo "$dfd_upload_comment"

  # two newlines between comment and credits
  echo ""

  for (( i = 0; i < "${#credits_title[@]}"; i++ )); do
    echo ${credits_title[$i]}$separator${credits_target[$i]}
  done
  echo ""
  echo "Original (Youtube)$separator$desc_orig_yt"
  echo "Original (niconico)$separator$desc_orig_nico"
  echo $UST_link
  echo $link_to_other_site

  for (( i = 0; i < "${#desc_extra_lines[@]}"; i++ )); do
    echo $dfd_extra
  done
}

# TODO: desc_print_desc


desc_reset
desc_ask_title
desc_ask_feat
desc_ask_pv
desc_ask_pretags
desc_ask_extratags

desc_ask_upload_comment
desc_ask_orig_credits
desc_ask_original_links

echo "
Title:"
desc_print_title

echo "
Description:"
desc_print_desc
